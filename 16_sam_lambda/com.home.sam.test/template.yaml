AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Type: String
    Description: Stage name to deploy resources to
    AllowedValues:
      - dev
      - stage
      - production

Resources:
  # See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  # for more info to see how to tune the lambda function configs based on your use case.
  AppFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      Handler: com.home.sam.test.App::handleRequest
      Timeout: 60
      MemorySize: 512
      CodeUri: .
      # Attach policies here to give the function permission to access other AWS resources if needed
      # See: https://github.com/awslabs/serverless-application-model/blob/master/docs/policy_templates.rst
      # eg:
      #Policies:
      # - S3ReadPolicy:
      #     BucketName: test-bucket
  BooksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: isbn
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  BooksApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Variables:
        LAMBDA_ALIAS: !Ref Stage

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      Handler: com.home.sam.test.GetItemFunction::handleRequest
      Timeout: 20
      MemorySize: 512
      CodeUri: .
      AutoPublishAlias: !Ref Stage
      Environment:
        Variables:
          TABLE: !Ref BooksTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BooksTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /books/{isbn}
            Method: get
            RestApiId:
              Ref: BooksApi

  PutItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      Handler: com.home.sam.test.PutItemFunction::handleRequest
      Timeout: 20
      MemorySize: 512
      CodeUri: .
      AutoPublishAlias: !Ref Stage
      Environment:
        Variables:
          TABLE: !Ref BooksTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref BooksTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /books
            Method: post
            RestApiId:
              Ref: BooksApi

  GetItemFunctionPython:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Handler: index.handler
      Timeout: 10
      MemorySize: 128
      AutoPublishAlias: !Ref Stage
      Environment:
        Variables:
          TABLE: !Ref BooksTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BooksTable
      InlineCode: |
        import json
        import boto3
        import os

        dynamodb = boto3.resource('dynamodb')


        def handler(event, context):
            table = dynamodb.Table(os.environ['TABLE'])
            response = ''
            book_key = event['pathParameters']['isbn']
            if book_key:
              try:
                book = table.get_item(Key={'isbn': book_key})
              except ClientError as e:
                print(e.response['Error']['Message'])
              else:
                response = json.dumps(book['Item'])
            return {
                'statusCode': 200,
                'body': response
            }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /books/python/{isbn}
            Method: get
            RestApiId:
              Ref: BooksApi